help(mtext)
setwd('../Papers/2011_Roy_Phil_Trans/Figure_Stochastic/')
1. Computes some forward trajector, starting form initial condition 0.2 / -0.4#
N = as.integer(1) #
state=matrix(c(0.2, -0.4),N,2)#
#
par = t(matrix(rep(PARAMS,N), ncol=4, nrow=1))#
#
output = as.integer(1)#
#
# make sure that par, lyap and ds have the right form.#
lyap  =  state[,1]#
ds    =  state#
lyap[] = 0#
ds  [,1] = 1.#
ds  [,2] = 0.#
#
# compute four sample trajectories with different parameters#
#
b=c(0.,0.)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
dyn.load('vanderpol.so')#
output = as.integer(0)#
icalclyap0 = as.integer(0)#
icalclyap1 = as.integer(1)
#
#
ALPHA = 30.0 ## time-scale separation#
BETA  = 1.03419 ## asymmetry: Bifurcation for beta = 1 or -1#
GAMMA = 0.00 ## forcing amplitude#
RATIO = 2.50 ## forcing angular velocity#
#
OMEGA_N = 2.20383 ## constant. Should be calculated for any new value of Beta#
#
#
PARAMS  = c(ALPHA, BETA, GAMMA,RATIO*OMEGA_N)#
TAU = 41 / (2*pi) * (RATIO* OMEGA_N)         ## not sent to the model. Only for diagnostic.#
na = as.integer(34)                          ## number of terms for forcing#
                                             ## use na=1 for periodic forcing#
#
ix = as.integer(2)#
output = as.integer(1)
  CONVERT_FACTOR = 2*pi / 41. #
#
  t0 = as.numeric(-700.*CONVERT_FACTOR)#
  t1 = as.numeric(+100.*CONVERT_FACTOR)#
#
#1. Computes some forward trajector, starting form initial condition 0.2 / -0.4#
N = as.integer(1) #
state=matrix(c(0.2, -0.4),N,2)#
#
par = t(matrix(rep(PARAMS,N), ncol=4, nrow=1))#
#
output = as.integer(1)
lyap  =  state[,1]#
ds    =  state#
lyap[] = 0#
ds  [,1] = 1.#
ds  [,2] = 0.#
#
# compute four sample trajectories with different parameters#
#
b=c(0.,0.)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
#
b=c(0.,0.)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,1])
plot(X_B0_BETA060[,2])
plot(X_B0_BETA060[,2], type='l')
plot(X_B0_BETA060[,3], type='l')
b=c(0.,0.)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,3], type='l')
#
PARAMS  = c(ALPHA, BETA, GAMMA,RATIO*OMEGA_N)#
TAU = 41 / (2*pi) * (RATIO* OMEGA_N)         ## not sent to the model. Only for diagnostic.#
na = as.integer(34)                          ## number of terms for forcing#
                                             ## use na=1 for periodic forcing#
#
ix = as.integer(2)#
output = as.integer(1)#
#
#
# define times#
#  remember : time units are weird.#
#  2*pi = 41,000 years of real time#
#  #
  CONVERT_FACTOR = 2*pi / 41. #
#
  t0 = as.numeric(-700.*CONVERT_FACTOR)#
  t1 = as.numeric(+100.*CONVERT_FACTOR)#
#
#1. Computes some forward trajector, starting form initial condition 0.2 / -0.4#
N = as.integer(1) #
state=matrix(c(0.2, -0.4),N,2)#
#
par = t(matrix(rep(PARAMS,N), ncol=4, nrow=1))#
#
output = as.integer(1)#
#
# make sure that par, lyap and ds have the right form.#
lyap  =  state[,1]#
ds    =  state#
lyap[] = 0#
ds  [,1] = 1.#
ds  [,2] = 0.#
#
# compute four sample trajectories with different parameters#
#
b=c(0.,0.)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,3], type='l')
par
par[3,]= 0.3
#
PARAMS  = c(ALPHA, BETA, GAMMA,RATIO*OMEGA_N)#
TAU = 41 / (2*pi) * (RATIO* OMEGA_N)         ## not sent to the model. Only for diagnostic.#
na = as.integer(34)                          ## number of terms for forcing#
                                             ## use na=1 for periodic forcing#
#
ix = as.integer(2)#
output = as.integer(1)#
#
#
# define times#
#  remember : time units are weird.#
#  2*pi = 41,000 years of real time#
#  #
  CONVERT_FACTOR = 2*pi / 41. #
#
  t0 = as.numeric(-700.*CONVERT_FACTOR)#
  t1 = as.numeric(+100.*CONVERT_FACTOR)#
#
#1. Computes some forward trajector, starting form initial condition 0.2 / -0.4#
N = as.integer(1) #
state=matrix(c(0.2, -0.4),N,2)#
#
par = t(matrix(rep(PARAMS,N), ncol=4, nrow=1))#
#
output = as.integer(1)#
#
# make sure that par, lyap and ds have the right form.#
lyap  =  state[,1]#
ds    =  state#
lyap[] = 0#
ds  [,1] = 1.#
ds  [,2] = 0.#
#
# compute four sample trajectories with different parameters#
#
b=c(0.,0.)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,3], type='l')
par
#
b=c(0.,0.)#
par[2] = 0.60#
par[3] = 0.30#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,3], type='l')
plot(X_B0_BETA060[,2], type='l')
#
b=c(0.,0.)#
par[2] = 0.75#
par[3] = 0.50#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,1], type='l')
X_B0_BETA060
plot(X_B0_BETA060[,1:2], type='l')
plot(X_B0_BETA060[,1]*CONVERT_FACTOR, X_B0_BETA060:2], type='l')
plot(X_B0_BETA060[,1]*CONVERT_FACTOR, X_B0_BETA060[, 2], type='l')
plot(X_B0_BETA060[,1]/CONVERT_FACTOR, X_B0_BETA060[, 2], type='l')
par[3,]= 0.4
#
b=c(0.,0.)#
par[2] = 0.75#
par[3] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,1]/CONVERT_FACTOR, X_B0_BETA060[, 2], type='l')
#
b=c(0.,0.)#
par[2] = 0.75#
par[3] = 0.40#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA060 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA060 = X_B0_BETA060[subsample,]
plot(X_B0_BETA060[,1]/CONVERT_FACTOR, X_B0_BETA060[, 2], type='l')
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 0.60#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA060 = read.table('trajectory.dat')[subsample,]
plot(X_B0_BETA060[,1]/CONVERT_FACTOR, X_B0_BETA060[, 2], type='l')
lines(X_B1_BETA060[,1]/CONVERT_FACTOR, X_B1_BETA060[, 2], type='l', col='red')
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
ix=24#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA060 = read.table('trajectory.dat')[subsample,]
lines(X_B1_BETA060[,1]/CONVERT_FACTOR, X_B1_BETA060[, 2], type='l', col='blue')
#
b=c(0.,0.)#
par[2] = 1.035#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA103 = read.table('trajectory.dat')[subsample,]
lines(X_B1_BETA103[,1]/CONVERT_FACTOR, X_B1_BETA103[, 2], type='l', col='red')
lines(X_B0_BETA103[,1]/CONVERT_FACTOR, X_B0_BETA103[, 2], type='l', col='red')
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 1.035#
par[3] = 0.#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA103 = read.table('trajectory.dat')[subsample,]
lines(X_B0_BETA103[,1]/CONVERT_FACTOR, X_B0_BETA103[, 2], type='l', col='blue')
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 1.035#
par[3] = 0.#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA103 = read.table('trajectory.dat')[subsample,]
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 1.035#
par[3] = 0.#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA103 = read.table('trajectory.dat')[subsample,]
plot(X_B1_BETA103[,1]/CONVERT_FACTOR, X_B1_BETA103[, 2], type='l', col='pink')
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 1.020#
par[3] = 0.#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA103 = read.table('trajectory.dat')[subsample,]
plot(X_B1_BETA103[,1]/CONVERT_FACTOR, X_B1_BETA103[, 2], type='l', col='pink')
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 1.018#
par[3] = 0.#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA103 = read.table('trajectory.dat')[subsample,]
plot(X_B1_BETA103[,1]/CONVERT_FACTOR, X_B1_BETA103[, 2], type='l', col='pink')
plot(X_B1_BETA103[,1]/CONVERT_FACTOR, X_B1_BETA103[, 3], type='l', col='pink')
#
##############################################################
# MAIN PROGRAM#
#
# DEFINE MAIN PARAMETERS#
# THE LIMIT CYCLE LENGTH OF THE VDP WITH ADOPTED PARAMETERS#
#
# PARAMS : Gamma, Omega#
# b : additive noise#
# ix: seed#
# output : 1 to get the fortran routine to output#
#            the trajectory to 'trajectory.dat'; 0 else. #
#
# natural angular velocity of the oscillator, valid for ALPHA=30.0 and BETA=0.75#
dyn.load('vanderpol.so')#
output = as.integer(0)#
icalclyap0 = as.integer(0)#
icalclyap1 = as.integer(1)#
#
#
#
ALPHA = 30.0 ## time-scale separation#
BETA  = 1.03419 ## asymmetry: Bifurcation for beta = 1 or -1#
GAMMA = 0.30 ## forcing amplitude#
RATIO = 2.50 ## forcing angular velocity#
#
OMEGA_N = 2.20383 ## constant. Should be calculated for any new value of Beta#
#
#
PARAMS  = c(ALPHA, BETA, GAMMA,RATIO*OMEGA_N)#
TAU = 41 / (2*pi) * (RATIO* OMEGA_N)         ## not sent to the model. Only for diagnostic.#
na = as.integer(34)                          ## number of terms for forcing#
                                             ## use na=1 for periodic forcing#
#
ix = as.integer(2)#
output = as.integer(1)#
#
#
# define times#
#  remember : time units are weird.#
#  2*pi = 41,000 years of real time#
#  #
  CONVERT_FACTOR = 2*pi / 41. #
#
  t0 = as.numeric(-700.*CONVERT_FACTOR)#
  t1 = as.numeric(+100.*CONVERT_FACTOR)#
#
#1. Computes some forward trajector, starting form initial condition 0.2 / -0.4#
N = as.integer(1) #
state=matrix(c(0.2, -0.4),N,2)#
#
par = t(matrix(rep(PARAMS,N), ncol=4, nrow=1))#
#
output = as.integer(1)#
#
# make sure that par, lyap and ds have the right form.#
lyap  =  state[,1]#
ds    =  state#
lyap[] = 0#
ds  [,1] = 1.#
ds  [,2] = 0.#
#
# compute four sample trajectories with different parameters#
#
b=c(0.,0.)#
par[2] = 0.75#
par[3] = 0.40#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA075 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA075 = X_B0_BETA060[subsample,]#
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
ix=24#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA060 = read.table('trajectory.dat')[subsample,]#
#
b=c(0.,0.)#
par[2] = 1.035#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA103 = read.table('trajectory.dat')[subsample,]#
#
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
par[2] = 1.018#
par[3] = 0.#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA101 = read.table('trajectory.dat')[subsample,]#
#
### note : #
## ATTENTION !!! #
## about the actual value of b. #
#
## in the code, the equation is code as follows:#
## dy = f(x,y)/OMEGA  dt + F(t) + b * dw, then#
## in /// adimensional // time units.#
## While in the paper, the equation is as follows:#
## dy = f(x,y)  dt + F(OMEGA * t) + b' * dw, then#
## we get : b' = b * SQRT(OMEGA).#
## This, the 'b'' of the paper should be first divided#
## by SQRT(OMEGA) before being passed on to the code#
#
## If now we write the DIMENSIONAL equations#
## say as :#
#
## dy = 1/TAU * [ f(x,y)  dt' + F(OMEGA * t' / TAU )] + 1/SQRT(TAU) b' * dw', then#
#
## then the equation is equivalent as above, i. e., setting t' = t * TAU, #
## i. e. : dt' = dt * TAU and dw' = dw * sqrt(TAU) #
## we have#
## dy =  [ f(x,y)  dt' + F(OMEGA * t' )] +  b' * dw', then#
#
#
# pdf('local_instability.pdf', height=7, width=6)#
plot_trajectory(X)#
dev.off()#
#
b=c(0.,0.083)/sqrt(RATIO*OMEGA_N)#
#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
#
X2 = read.table('trajectory.dat')#
X2 = X2[subsample,]#
TIMES = X_B0_BETA103[,1] / CONVERT_FACTOR#
#
plot(TIMES, X_B0_BETA75[,2], lty=1, lwd=2, col='black', axis=F, ylim=c(-2,5))#
lines(TIMES, X_B0_BETA75[,3]-3, lty=1, lwd=2, col='black')#
lines(TIMES, X_B0_BETA75[,4]+3, lty=1, lwd=2, col='black')#
#
lines(TIMES, X_B1_BETA75[,2], lty=1, lwd=2,   col='red')#
lines(TIMES, X_B1_BETA75[,3]-3, lty=1, lwd=2, col='red')
#
b=c(0.,0.)#
par[2] = 0.75#
par[3] = 0.40#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B0_BETA075 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)#
X_B0_BETA075 = X_B0_BETA060[subsample,]
#
plot(TIMES, X_B0_BETA75[,2], lty=1, lwd=2, col='black', axis=F, ylim=c(-2,5))#
lines(TIMES, X_B0_BETA75[,3]-3, lty=1, lwd=2, col='black')#
lines(TIMES, X_B0_BETA75[,4]+3, lty=1, lwd=2, col='black')
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)
X_B0_BETA075 = read.table('trajectory.dat')
plot(TIMES, X_B0_BETA75[,2], lty=1, lwd=2, col='black', axis=F, ylim=c(-2,5))
#
plot(TIMES, X_B0_BETA075[,2], lty=1, lwd=2, col='black', axis=F, ylim=c(-2,5))#
lines(TIMES, X_B0_BETA075[,3]-3, lty=1, lwd=2, col='black')#
lines(TIMES, X_B0_BETA075[,4]+3, lty=1, lwd=2, col='black')#
#
lines(TIMES, X_B1_BETA075[,2], lty=1, lwd=2,   col='red')#
lines(TIMES, X_B1_BETA075[,3]-3, lty=1, lwd=2, col='red')
b=c(0.,0.100)/sqrt(RATIO*OMEGA_N)#
ix=24#
OUT = .Fortran('propagate_lin', N, state,par,t0,t1, b, ix, output, icalclyap1, ds, lyap,na)#
X_B1_BETA075 = read.table('trajectory.dat')[subsample,]
#
plot(TIMES, X_B0_BETA075[,2], lty=1, lwd=2, col='black', axis=F, ylim=c(-2,5))#
lines(TIMES, X_B0_BETA075[,3]-3, lty=1, lwd=2, col='black')#
lines(TIMES, X_B0_BETA075[,4]+3, lty=1, lwd=2, col='black')
X_B0_BETA075
subsample
X_B0_BETA075 = read.table('trajectory.dat')#
subsample=seq(1,length(X_B0_BETA060[,1]),10)
subsample
X_B0_BETA075
